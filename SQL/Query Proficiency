USE AdventureWorks2019
GO 

-- How many Employees (EEs) are working in AdventureWorks2019? Showcases my logical analysis with new datasets. 

	SELECT * 
	FROM HumanResources.Employee --290 rows returned, which means there are 290 EE in total

	SELECT COUNT(*) as Total_Employees, 
		PersonType 
	FROM Person.Person 
	GROUP BY PersonType --To identify all person classifications

	SELECT * 
	FROM Person.Person 
	WHERE PersonType IN ('EM', 'SP') --Returns all 290 EEs
	
	/* 
	Taken from 'datado.com/AdventureWorks.pdf'
	SP = Sales person, 
	EM = Employee (non-sales)
	*/


-- Generates a report that provides full name of highest paid EEs, Job Title, AnnualSalary and WorkShift. Showcases INNER JOIN.

	SELECT MIN(StartDate) 
	FROM HumanResources.EmployeeDepartmentHistory 

	SELECT HRE.BusinessEntityID, 
		CONCAT_WS(' ', Title, FirstName, LastName) Employee, 
		HRE.JobTitle, 
		HRE.LoginID,
		((convert(money, HRP.Rate, 1)) * 2080) AnnualSalary,
		HRS.Name as WorkShift
	from HumanResources.Employee HRE
		INNER JOIN Person.Person P
			ON P.BusinessEntityID = HRE.BusinessEntityID
		INNER JOIN HumanResources.EmployeePayHistory HRP
			ON HRP.BusinessEntityID = P.BusinessEntityID
		INNER JOIN HumanResources.EmployeeDepartmentHistory HREDH
			ON HRP.BusinessEntityID = HREDH.BusinessEntityID
		INNER JOIN HumanResources.Shift HRS
			ON HREDH.ShiftID = HRS.ShiftID
	WHERE ((CONVERT(MONEY, HRP.Rate, 1)) * 2080) > '70000'
		AND StartDate > '2006-06-30'
	ORDER BY BusinessEntityID
	
	
-- Removes duplicate values from Production.TransactionHistory table. Showcases data cleansing.

	WITH  DuplicateValues AS  
 		( SELECT  PTH.TransactionID, 
		   	  PTH.ProductID, 
		  ROW_NUMBER() OVER ( PARTITION BY PTH.TransactionID, 
		   	  PTH.ProductID ORDER BY PTH.TransactionID) AS Duplicates 
		  FROM  production.TransactionHistory PTH ) 
  	DELETE  FROM DuplicateValues  
  	WHERE  Duplicates> 1  
	
	
-- Creates a table for BestSellingProducts. Showcases Analytic Functions.

	SELECT DISTINCT SSOD.ProductID,
		ProdP.Name ProductName,
		ProdP.ListPrice,
		SUM(OrderQty) UnitsSold,
		(ProdP.ListPrice * SUM(OrderQty)) SalesRevenue,
		PERCENT_RANK() OVER(ORDER BY (ProdP.ListPrice * SUM(OrderQty))) PercentRankOfSalesRevenue --Ranks the most profitable Product 
	FROM Sales.SalesOrderDetail SSOD
		INNER JOIN Production.Product ProdP
			ON SSOD.ProductID = ProdP.ProductID
	GROUP BY SSOD.ProductID,
		ProdP.Name,
		ProdP.ListPrice
	ORDER BY SalesRevenue DESC
	
	SELECT DISTINCT ProductID from Sales.SalesOrderDetail -- 266/504 total products were sold
	SELECT SUM(OrderQty) from Sales.SalesOrderDetail where ProductID = '707' --Error check to verify quanity sold per product


-- Shows which products are selling higher than average amounts. Showcases SUBQUERIES.

SELECT *
FROM
	(SELECT DISTINCT SSOD.ProductID,			
		ProdP.Name ProductName,
		ProdP.ListPrice,
		SUM(OrderQty) UnitsSold,
		(ProdP.ListPrice * SUM(OrderQty)) SalesRevenue,
		PERCENT_RANK() OVER(ORDER BY (ProdP.ListPrice * SUM(OrderQty))) PercentRankOfSalesRevenue 
	FROM Sales.SalesOrderDetail SSOD
		INNER JOIN Production.Product ProdP
			ON SSOD.ProductID = ProdP.ProductID
	GROUP BY SSOD.ProductID,
		ProdP.Name,
		ProdP.ListPrice) BestSellingProducts
WHERE UnitsSold >= (SELECT AVG(UnitsSold) AvgUnitsSold					--This subquery calculates the AvgQuanityAmnt from Sales
				FROM (SELECT DISTINCT SSOD.ProductID,
					SUM(OrderQty) UnitsSold
					FROM Sales.SalesOrderDetail SSOD
					GROUP BY SSOD.ProductID) as AvgQuanityAmnt)
   AND
	SalesRevenue >= (SELECT AVG(salesrevenue) 
			FROM	(SELECT DISTINCT SSOD.ProductID,			--This subquery calculates which products generated the most sales revenue as HighestProfitProducts
					ProdP.Name ProductName,
					ProdP.ListPrice,
					SUM(OrderQty) UnitsSold,
					(ProdP.ListPrice * SUM(OrderQty)) SalesRevenue
				FROM Sales.SalesOrderDetail SSOD
				INNER JOIN Production.Product ProdP
					ON SSOD.ProductID = ProdP.ProductID
				GROUP BY SSOD.ProductID,
					ProdP.Name,
					ProdP.ListPrice) HighestProfitProducts)
ORDER BY PercentRankOfSalesRevenue DESC
